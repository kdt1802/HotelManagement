/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.ToolCheckInput;
import javax.swing.JOptionPane;
import model.Room;
import model.RoomBLL;

/**
 *
 * @author Windows 10 Gamer
 */
public class AddRoomForm extends javax.swing.JFrame {

    private static AddRoomForm object;
    private static AddRoomForm object1;

    RoomBLL mRoomBLL = new RoomBLL();
    private int selectedRoomNumber = -1;
    Room objRoomUpdate;

    private AddRoomForm() {
        initComponents();
        setLocationRelativeTo(null);
    }

    public static AddRoomForm getObject() {
        if (object == null) {
            object = new AddRoomForm();
        } else {
            object.dispose();
            object = new AddRoomForm();
        }
        return object;
    }

    /**
     * Creates new form AddRoomForm
     *
     * @param room
     */
    private AddRoomForm(Room room) {
        initComponents();
        setLocationRelativeTo(null);
        txtRoomID.setText("" + room.getRoomID());

        if (room.getRoomType() == 0) {
            cbRoomType.setSelectedIndex(0);
        } else if (room.getRoomType() == 1) {
            cbRoomType.setSelectedIndex(1);
        } else {
            cbRoomType.setSelectedIndex(2);
        }

        txtRoomNumber.setText("" + room.getRoomNumber());
        txtNightPrice.setText("" + room.getNightPrice());
        txtHourPrice.setText("" + room.getHourPrice());

        if (room.getStatus() == 0) {
            cbStatus.setSelectedIndex(0);
        } else {
            cbStatus.setSelectedIndex(1);
        }
        selectedRoomNumber = room.getRoomNumber();
    }

    public static AddRoomForm getObject1(Room room) {
        if (object1 == null) {
            object1 = new AddRoomForm(room);
        } else {
            object1.dispose();
            object1 = new AddRoomForm(room);
        }

        return object1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtRoomNumber = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtRoomID = new javax.swing.JTextField();
        cbRoomType = new javax.swing.JComboBox<>();
        cbStatus = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        txtNightPrice = new javax.swing.JTextField();
        txtHourPrice = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add/Update Room");
        setResizable(false);

        jLabel2.setText("Room type");

        jLabel3.setText("Room number");

        jLabel4.setText("Night Price");

        jLabel5.setText("Hour Price");

        jLabel6.setText("Status");

        btnSave.setText("SAVE");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setText("CANCEL");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jLabel7.setText("Room ID");

        txtRoomID.setEditable(false);

        cbRoomType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Single Room", "Couple Room", "Domitory Room" }));

        cbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Available", "Maintaining" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(45, 45, 45))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtRoomNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                            .addComponent(txtHourPrice))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(cbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(txtNightPrice)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(txtRoomID, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(cbRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(51, 51, 51))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel7)
                    .addComponent(txtRoomID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtRoomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtNightPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(cbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHourPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnCancel))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (selectedRoomNumber > 0) {
            if (checkInput()) {
                objRoomUpdate = new Room();
                objRoomUpdate.setRoomID(Integer.parseInt(txtRoomID.getText()));
                objRoomUpdate.setRoomType(cbRoomType.getSelectedIndex());
                objRoomUpdate.setRoomNumber(Integer.parseInt(txtRoomNumber.getText()));
                objRoomUpdate.setNightPrice(Float.parseFloat(txtNightPrice.getText()));
                objRoomUpdate.setHourPrice(Float.parseFloat(txtHourPrice.getText()));
                objRoomUpdate.setStatus(cbStatus.getSelectedIndex());

                // mRoomBLL.updateRoom(objRoomUpdate);
                int check = mRoomBLL.updateRoom(objRoomUpdate);
                if (check != -1) {
                    JOptionPane.showMessageDialog(this, "Update Successful", "Notification", JOptionPane.WARNING_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Update Fail", "Notification", JOptionPane.WARNING_MESSAGE);
                }
                RoomManagePanel.loadData(mRoomBLL.getAllRoom());
            }
        } else if (checkInput()) {
            Room addRoom = new Room();
            addRoom.setRoomType(cbRoomType.getSelectedIndex());
            addRoom.setRoomNumber(Integer.parseInt(txtRoomNumber.getText()));
            addRoom.setNightPrice(Float.parseFloat(txtNightPrice.getText()));
            addRoom.setHourPrice(Float.parseFloat(txtHourPrice.getText()));
            addRoom.setStatus(cbStatus.getSelectedIndex());

            // mRoomBLL.addRoom(addRoom);
            int check = mRoomBLL.addRoom(addRoom);
            if (check != -1) {
                JOptionPane.showMessageDialog(this, "Insert Successful", "Notification", JOptionPane.WARNING_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Insert Fail", "Notification", JOptionPane.WARNING_MESSAGE);
            }
            RoomManagePanel.loadData(mRoomBLL.getAllRoom());
            this.dispose();
        }
    }//GEN-LAST:event_btnSaveActionPerformed
    public boolean checkInput() {
        String roomNumber = txtRoomNumber.getText().trim();
        String hourPrice = txtHourPrice.getText();
        String nightPrice = txtNightPrice.getText();


        if (roomNumber.isEmpty()) {
            showNotification("Room number can not empty !");
            txtRoomNumber.requestFocus();
            return false;
        } else if (!ToolCheckInput.checkInteger(roomNumber)) {
            showNotification("Room number is incorrect !");
            txtRoomNumber.requestFocus();
            return false;
        } else if (hourPrice.isEmpty()) {
            showNotification("Hour price can not empty !");
            txtHourPrice.requestFocus();
            return false;
        } else if (!ToolCheckInput.checkFloat(hourPrice)) {
            showNotification("Hour price is incorrect !");
            txtHourPrice.requestFocus();
            return false;
        } else if (nightPrice.isEmpty()) {
            showNotification("Night price can not empty !");
            txtNightPrice.requestFocus();
            return false;
        } else if (!ToolCheckInput.checkFloat(nightPrice)) {
            showNotification("Night price is incorrect !");
            txtNightPrice.requestFocus();
            return false;
        } else if (selectedRoomNumber == -1) {
            if (mRoomBLL.getRoomByRoomNumber(Integer.parseInt(roomNumber)).getRoomNumber() == Integer.parseInt(roomNumber)) {
                showNotification("Room number already exists!");
                txtRoomNumber.requestFocus();
                return false;
            }
        } else if (selectedRoomNumber != Integer.parseInt(roomNumber)) {
            if (mRoomBLL.getRoomByRoomNumber(Integer.parseInt(roomNumber)).getRoomNumber() == Integer.parseInt(roomNumber)) {
                showNotification("Room number already exists!");
                txtRoomNumber.requestFocus();
                return false;
            }
        }
        return true;
    }

    public void showNotification(String s) {
        JOptionPane.showMessageDialog(this, s, "Notification", JOptionPane.WARNING_MESSAGE);
    }
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        int ask = JOptionPane.showConfirmDialog(this, "Cancel?", "Warning", JOptionPane.YES_NO_OPTION);
        if (ask == JOptionPane.YES_OPTION) {
            this.dispose();
        }
    }//GEN-LAST:event_btnCancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cbRoomType;
    private javax.swing.JComboBox<String> cbStatus;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField txtHourPrice;
    private javax.swing.JTextField txtNightPrice;
    private javax.swing.JTextField txtRoomID;
    private javax.swing.JTextField txtRoomNumber;
    // End of variables declaration//GEN-END:variables
}
