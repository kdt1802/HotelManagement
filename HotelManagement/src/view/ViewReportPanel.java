/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.BarChartDAO;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import model.BillBLL;
import model.Booking;
import model.BookingBLL;
import model.BookingDetail1;
import model.BookingDetail1BLL;
import model.BookingDetailBLL;
import model.Client;
import model.ClientBLL;
import model.PendingRoom;
import model.Room;
import model.RoomBLL;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author sev_user
 */
public class ViewReportPanel extends javax.swing.JPanel {

    private static ClientBLL mClientBLL;
    private static RoomBLL mRoomBLL;
    private static BookingBLL mBookingBLL;
    private static BookingDetailBLL mBookingDTBLL;
    private static BookingDetail1BLL mBookingDT1BLL;
    private static BillBLL mBillBLL;
    private static int selectedRow = -1;
    private DocumentListener clientNameListener;
    private DocumentListener clientPhoneListener;
    private static Vector origninalTableModel;

    /**
     * Creates new form ViewReportPanel1
     */
    public ViewReportPanel() {
        initComponents();

        mClientBLL = new ClientBLL();
        mRoomBLL = new RoomBLL();
        mBookingBLL = new BookingBLL();
        mBookingDTBLL = new BookingDetailBLL();
        mBookingDT1BLL = new BookingDetail1BLL();
        mBillBLL = new BillBLL();

        loadData();
        addDocumentListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbbYear = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtClientName = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBookingList = new javax.swing.JTable();
        btnDetail = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cbbYear.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cbbYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2016", "2017", "2018", "2019" }));
        cbbYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbYearActionPerformed(evt);
            }
        });
        add(cbbYear, new org.netbeans.lib.awtextra.AbsoluteConstraints(1041, 42, 109, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Search Booking");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(38, 45, -1, 34));

        txtClientName.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        txtClientName.setText("Client Name");
        txtClientName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtClientNameFocusLost(evt);
            }
        });
        txtClientName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtClientNameMouseClicked(evt);
            }
        });
        add(txtClientName, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 42, 182, 37));

        txtPhone.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        txtPhone.setText("Client Phone");
        txtPhone.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPhoneFocusLost(evt);
            }
        });
        txtPhone.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtPhoneMouseClicked(evt);
            }
        });
        add(txtPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 42, 172, 37));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("View report");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(918, 45, -1, -1));

        tblBookingList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Booking ID", "Client ID", "Client Name", "Client Phone", "Booking Time", "Estimate Price", "Status"
            }
        ));
        tblBookingList.setRowHeight(22);
        jScrollPane1.setViewportView(tblBookingList);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(38, 97, 1112, 456));

        btnDetail.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        btnDetail.setText("Detail");
        btnDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailActionPerformed(evt);
            }
        });
        add(btnDetail, new org.netbeans.lib.awtextra.AbsoluteConstraints(456, 571, 98, 33));

        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(572, 571, 98, 33));
    }// </editor-fold>//GEN-END:initComponents

    public static void loadData() {
        DefaultTableModel tblRoomListModel = (DefaultTableModel) tblBookingList.getModel();
        tblRoomListModel.setRowCount(0);

        ResultSet rs = mBookingBLL.getAllBooking();

        try {
            while (rs.next()) {
                String clientName = mClientBLL.getNameById(rs.getInt(2));
                String clientPhone = mClientBLL.getPhoneByID(rs.getInt(2));

                String status;
                switch (rs.getInt(6)) {
                    case 0:
                        status = "Not checkin yet";
                        break;
                    case 1:
                        status = "Checked-in";
                        break;
                    case 2:
                        status = "Checked-out";
                        break;
                    default:
                        status = "Canceled";
                        break;
                }

                DecimalFormat df = new DecimalFormat("#.##");
                DateFormat mDateFormat = new SimpleDateFormat("dd/MM/YYYY HH:mm");
                Object[] data = {
                    rs.getInt(1),
                    rs.getInt(2),
                    clientName,
                    clientPhone,
                    mDateFormat.format(rs.getTimestamp(4)),
                    df.format(rs.getFloat(5)),
                    status
                };

                tblRoomListModel.addRow(data);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ReceptionistForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        tblBookingList.setModel(tblRoomListModel);

        origninalTableModel = (Vector) ((DefaultTableModel) tblBookingList.getModel()).getDataVector().clone();
    }

    private void addDocumentListener() {
        clientNameListener = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                search();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                search();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                search();
            }

            private void search() {
                searchByName(txtClientName.getText());
            }
        };

        clientPhoneListener = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                search2();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                search2();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                search2();
            }

            private void search2() {
                searchByPhone(txtPhone.getText());
            }
        };
    }

    private void searchByName(String searchString) {
        DefaultTableModel tblBookingModel = (DefaultTableModel) tblBookingList.getModel();
        tblBookingModel.setRowCount(0);

        for (Object rows : origninalTableModel) {
            Vector rowVector = (Vector) rows;
            if (rowVector.get(2).toString().contains(searchString)) {
                tblBookingModel.addRow(rowVector);
            }
        }
    }

    private void searchByPhone(String phoneNumber) {
        DefaultTableModel tblBookingModel = (DefaultTableModel) tblBookingList.getModel();
        tblBookingModel.setRowCount(0);

        for (Object rows : origninalTableModel) {
            Vector rowVector = (Vector) rows;
            if (rowVector.get(3).toString().contains(phoneNumber)) {
                tblBookingModel.addRow(rowVector);
            }
        }
    }

    private void cbbYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbYearActionPerformed
        BarChartDAO barChartDAO = new BarChartDAO();
        int year = Integer.parseInt(cbbYear.getSelectedItem().toString());

        Float[] listAmount = new Float[12];
        for (int i = 0; i < 12; i++) {
            listAmount[i] = barChartDAO.getAmountByMonthAndYear(i + 1, year);
        }

        DefaultCategoryDataset barDataset = new DefaultCategoryDataset();
        for (int i = 0; i < 12; i++) {
            barDataset.setValue(listAmount[i], "Profit", "Month " + (i + 1));
        }
        //Create the chart
        JFreeChart chart = ChartFactory.createBarChart3D(
             "Profit of " + year, "Month", "Profit", barDataset,
             PlotOrientation.VERTICAL, false, true, false);

        //Render the frame
        ChartFrame chartFrame = new ChartFrame("Profit by year", chart);
        chartFrame.setVisible(true);
        chartFrame.setSize(1000, 700);
        chartFrame.setLocationRelativeTo(null);
    }//GEN-LAST:event_cbbYearActionPerformed

    private void txtClientNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtClientNameMouseClicked
        txtClientName.getDocument().addDocumentListener(clientNameListener);
        txtClientName.selectAll();
    }//GEN-LAST:event_txtClientNameMouseClicked

    private void txtPhoneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPhoneMouseClicked
        txtPhone.getDocument().addDocumentListener(clientPhoneListener);
        txtPhone.selectAll();
    }//GEN-LAST:event_txtPhoneMouseClicked

    private void btnDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailActionPerformed
        selectedRow = tblBookingList.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Select booking to view detail!!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            Client mClient = new Client();
            ArrayList<PendingRoom> mListRoom = new ArrayList<>();
            ArrayList<BookingDetail1> mListService = new ArrayList<>();

            GetBookingDetail(mClient, mListRoom, mListService);
        }
    }//GEN-LAST:event_btnDetailActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        selectedRow = tblBookingList.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Select booking to delete!!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            String status = tblBookingList.getValueAt(selectedRow, 6).toString();

            if (!status.equals("Checked-out")) {
                JOptionPane.showMessageDialog(this, "Booking is using!! Do not delete!!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {
                int ask = JOptionPane.showConfirmDialog(this, "Do you really want to delete this booking?", "Warning", JOptionPane.YES_NO_OPTION);
                if (ask == JOptionPane.YES_OPTION) {
                    //Delete data from 4 tables BOOKING_DETAIL,BOOKING_DETAIL_1, BOOKING and CLIENT
                    int bookingID = Integer.parseInt(tblBookingList.getValueAt(selectedRow, 0).toString());
                    int clientID = Integer.parseInt(tblBookingList.getValueAt(selectedRow, 1).toString());

                    mBookingDTBLL.deleteBookingDetailByID(bookingID);
                    mBookingDT1BLL.deleteBookingDetail_1_ByID(bookingID);
                    mBillBLL.deleteByBookingID(bookingID);
                    mBookingBLL.deleteBookingByID(bookingID);
                    mClientBLL.deleteByID(clientID);

                    loadData();
                }
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtClientNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtClientNameFocusLost
        txtClientName.getDocument().removeDocumentListener(clientNameListener);
        if (txtClientName.getText().equals("")) {
            txtClientName.setText("client name");
        }
    }//GEN-LAST:event_txtClientNameFocusLost

    private void txtPhoneFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPhoneFocusLost
        txtPhone.getDocument().removeDocumentListener(clientPhoneListener);
        if (txtPhone.getText().equals("")) {
            txtPhone.setText("client phone");
        }
    }//GEN-LAST:event_txtPhoneFocusLost

    private void GetBookingDetail(Client mClient, ArrayList<PendingRoom> mListRoom, ArrayList<BookingDetail1> mListService) {
        mClient = mClientBLL.getClientById(Integer.parseInt(tblBookingList.getValueAt(selectedRow, 1).toString()));

        int bookingID = Integer.parseInt(tblBookingList.getValueAt(selectedRow, 0).toString());
        Booking mBooking = new Booking();

        ResultSet rs1 = mBookingBLL.getBookingByID(bookingID);
        try {
            while (rs1.next()) {
                mBooking.setBookingID(bookingID);
                mBooking.setClientID(rs1.getInt(2));
                mBooking.setNote(rs1.getString(3));
                mBooking.setBookingTime(rs1.getDate(4));
                mBooking.setEstimatePrice(rs1.getFloat(5));
                mBooking.setStatus(rs1.getInt(6));
            }
        } catch (SQLException ex) {
            Logger.getLogger(ReceptionistForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        ResultSet rs2 = mBookingDTBLL.getBookingDetailByID(bookingID);
        try {
            while (rs2.next()) {
                PendingRoom mPendingRoom = new PendingRoom();
                Room mRoom = mRoomBLL.getRoomByID(rs2.getInt(2));

                mPendingRoom.setRoomID(rs2.getInt(2));
                mPendingRoom.setRoomType(mRoom.getRoomType());
                mPendingRoom.setRoomNumber(mRoom.getRoomNumber());

                mPendingRoom.setCheckinTime((rs2.getTimestamp(4)));
                mPendingRoom.setCheckoutTime(rs2.getTimestamp(5));

                mPendingRoom.setNightPrice(mRoom.getNightPrice());
                mPendingRoom.setHourPrice(mRoom.getHourPrice());

                float price;
                long stayTime = rs2.getDate(5).getTime() - rs2.getDate(4).getTime();
                long stayInHour = stayTime / (60 * 60 * 1000) % 24;
                long stayInDay = stayTime / (24 * 60 * 60 * 1000);
                price = mRoom.getNightPrice() * stayInDay + mRoom.getHourPrice() * stayInHour;
                mPendingRoom.setTotalprice(price);

                mPendingRoom.setStatus(rs2.getInt(6));

                mListRoom.add(mPendingRoom);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ReceptionistForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        ResultSet rs3 = mBookingDT1BLL.getBookingDetail_1_ByID(bookingID);
        try {
            while (rs3.next()) {
                BookingDetail1 mPendingService = new BookingDetail1();

                mPendingService.setBookingID(rs3.getInt(1));
                mPendingService.setServiceID(rs3.getInt(2));
                mPendingService.setServiceName(rs3.getString(3));
                mPendingService.setServiceQuantity(rs3.getInt(4));
                mPendingService.setServicePrice(rs3.getFloat(5));

                mListService.add(mPendingService);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ReceptionistForm.class.getName()).log(Level.SEVERE, null, ex);
        }

//        BookingForm.getObject1("manager", null, mBooking, mClient, mListRoom, mListService).setVisible(true);
        BookingDialog bookingDialog = new BookingDialog(new javax.swing.JFrame("Booking Detail"), true, "manager", null, mBooking, mClient, mListRoom, mListService);
        bookingDialog.setVisible(true);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDetail;
    private javax.swing.JComboBox<String> cbbYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private static javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTable tblBookingList;
    private javax.swing.JTextField txtClientName;
    private javax.swing.JTextField txtPhone;
    // End of variables declaration//GEN-END:variables
}
