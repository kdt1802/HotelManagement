/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import model.PendingRoom;
import model.RoomBLL;

/**
 *
 * @author sev_user
 */
public class BookingRoomDetail extends java.awt.Dialog {

    private static RoomBLL mRoomBLL;
    PendingRoom pdRoom;
    DecimalFormat df = new DecimalFormat("#.##");
    private int bookingID;
    /**
     * Creates new form BookingRoomDetail
     * @param parent
     * @param modal
     * @param pdRoom
     * @param bookingID
     */
    public BookingRoomDetail(java.awt.Frame parent, boolean modal, int bookingID, PendingRoom pdRoom) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);

        mRoomBLL = new RoomBLL();
        this.pdRoom = pdRoom;
        this.bookingID = bookingID;
        txtRoomID.setText("" + pdRoom.getRoomID());
        txtRoomNumber.setText("" + pdRoom.getRoomNumber());

        String roomType;
        switch (pdRoom.getRoomType()) {
            case 0:
                roomType = "Single Room";
                break;
            case 1:
                roomType = "Couple Room";
                break;
            default:
                roomType = "Dormitory Room";
                break;
        }
        txtRoomType.setText(roomType);

        String pdRoomStatus;
        switch (pdRoom.getStatus()) {
            case 0:
                pdRoomStatus = "Booked";
                break;
            case 1:
                pdRoomStatus = "Received";
                break;
            default:
                pdRoomStatus = "Returned";
        }

        txtRoomStatus.setText(pdRoomStatus);

        spnCheckin.setValue(pdRoom.getCheckinTime());
        spnCheckout.setValue(pdRoom.getCheckoutTime());

        txtPrice.setText(df.format(pdRoom.getTotalprice()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtRoomID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtRoomNumber = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtRoomType = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        spnCheckin = new javax.swing.JSpinner();
        spnCheckout = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        txtRoomStatus = new javax.swing.JTextField();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jLabel1.setText("Room ID");

        txtRoomID.setEditable(false);

        jLabel2.setText("Room Number");

        txtRoomNumber.setEditable(false);

        jLabel3.setText("Room Type");

        txtRoomType.setEditable(false);

        jLabel4.setText("Checkout Time");

        jLabel5.setText("Checkin Time");

        jLabel6.setText("Price");

        txtPrice.setEditable(false);

        btnSave.setText("Update");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        spnCheckin.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.HOUR));

        spnCheckout.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.HOUR));

        jLabel8.setText("Room status");

        txtRoomStatus.setEditable(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(45, 45, 45)
                                .addComponent(txtRoomID))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtRoomNumber))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtRoomType, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtRoomStatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(57, 57, 57)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPrice)
                            .addComponent(spnCheckin, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                            .addComponent(spnCheckout))))
                .addGap(39, 39, 39))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtRoomID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(spnCheckin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtRoomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(spnCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtRoomStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSave)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        DateFormat mDateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm");
        Date checkinDate = (Date) spnCheckin.getValue();
        Date checkoutDate = (Date) spnCheckout.getValue();
        String checkinString = mDateFormat.format(checkinDate);
        String checkoutString = mDateFormat.format(checkoutDate);

        Date toDay = new Date();
        if (checkinDate.before(toDay) && pdRoom.getStatus() == 0) {
            JOptionPane.showMessageDialog(this, "Checkin time must later than current time", "Warning", JOptionPane.WARNING_MESSAGE);
            spnCheckin.requestFocus();
        } else if (checkoutDate.before(toDay)) {
            JOptionPane.showMessageDialog(this, "Checkout time must later than current time", "Warning", JOptionPane.WARNING_MESSAGE);
            spnCheckout.requestFocus();
        } else {
            if (mRoomBLL.isExtendable(bookingID, pdRoom.getRoomID(), checkinString, checkoutString)) {
                for (PendingRoom pendingRoom : BookingDialog.listRoomPending) {
                    if (pendingRoom.getRoomID() == pdRoom.getRoomID()) {
                        pendingRoom.setCheckinTime(checkinDate);
                        pendingRoom.setCheckoutTime(checkoutDate);

                        float nightPrice = pdRoom.getNightPrice();
                        float hourPrice = pdRoom.getHourPrice();
                        float price;
                        long stayTime = checkoutDate.getTime() - checkinDate.getTime();
                        long stayInHour = stayTime / (60 * 60 * 1000) % 24;
                        long stayInDay = stayTime / (24 * 60 * 60 * 1000);
                        price = nightPrice * stayInDay + hourPrice * stayInHour;

                        float priceChange = pdRoom.getTotalprice() - price;
                        BookingDialog.estPrice -= priceChange;
                        BookingDialog.txtEstPrice.setText(df.format(BookingDialog.estPrice));
                        pendingRoom.setTotalprice(price);

                        break;
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Room is not available during this time!!", checkinString, HEIGHT);
            }

            BookingDialog.loadRoom();
            this.dispose();
        }
    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private static javax.swing.JSpinner spnCheckin;
    private static javax.swing.JSpinner spnCheckout;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtRoomID;
    private javax.swing.JTextField txtRoomNumber;
    private javax.swing.JTextField txtRoomStatus;
    private javax.swing.JTextField txtRoomType;
    // End of variables declaration//GEN-END:variables
}
