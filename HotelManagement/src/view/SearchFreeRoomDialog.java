/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.PendingRoom;
import model.RoomBLL;

/**
 *
 * @author sev_user
 */
public class SearchFreeRoomDialog extends java.awt.Dialog {

    RoomBLL mRoomBLL;
    private static int selectedRow = -1;
    private static DecimalFormat df = new DecimalFormat("#.##");

    /**
     * Creates new form SearchFreeRoomDialog
     *
     * @param parent
     * @param modal
     */
    public SearchFreeRoomDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        mRoomBLL = new RoomBLL();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSpnCheckin = new javax.swing.JSpinner();
        jSpnCheckout = new javax.swing.JSpinner();
        cbRoomType = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        btnAddPending = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRoomList = new javax.swing.JTable();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Search Free room");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, 30));

        jSpnCheckin.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.HOUR_OF_DAY));
        jPanel1.add(jSpnCheckin, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, 130, 30));

        jSpnCheckout.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.HOUR_OF_DAY));
        jPanel1.add(jSpnCheckout, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, -1, 30));

        cbRoomType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Single Room", "Couple Room", "Domitory Room" }));
        jPanel1.add(cbRoomType, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 20, -1, 30));

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        jPanel1.add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 20, -1, 30));

        btnAddPending.setText("Add");
        btnAddPending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPendingActionPerformed(evt);
            }
        });
        jPanel1.add(btnAddPending, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 370, 110, 41));

        tblRoomList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Room ID", "Room Type", "Room Number", "Night Price", "Hour Price", "Status"
            }
        ));
        jScrollPane1.setViewportView(tblRoomList);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 920, 280));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 979, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        DateFormat mDateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        Date checkinDate = (Date) jSpnCheckin.getValue();
        Date checkoutDate = (Date) jSpnCheckout.getValue();

        String checkinString = mDateFormat.format(checkinDate);
        String checkoutString = mDateFormat.format(checkoutDate);
        Date toDay = new Date();
        int roomType = cbRoomType.getSelectedIndex();

        if (checkinDate.before(toDay)) {
            JOptionPane.showMessageDialog(this, "Checkin time must later than current time", "Warning", JOptionPane.WARNING_MESSAGE);
            jSpnCheckin.requestFocus();
        } else if (checkinDate.after(checkoutDate)) {
            JOptionPane.showMessageDialog(this, "Checkin time must earlier than checkout time", "Warning", JOptionPane.WARNING_MESSAGE);
            jSpnCheckout.requestFocus();
        } else {
            jScrollPane1.setVisible(true);
            loadData(mRoomBLL.searchFreeRoom(roomType, checkinString, checkoutString));
        }        // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnAddPendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPendingActionPerformed
        selectedRow = tblRoomList.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Select room to add!!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            PendingRoom mRoom = new PendingRoom();

            Date checkinDate = (Date) jSpnCheckin.getValue();
            Date checkoutDate = (Date) jSpnCheckout.getValue();
            float nightPrice = (float) tblRoomList.getValueAt(selectedRow, 3);
            float hourPrice = (float) tblRoomList.getValueAt(selectedRow, 4);

            mRoom.setCheckinTime(checkinDate);
            mRoom.setCheckoutTime(checkoutDate);
            mRoom.setRoomID((int) tblRoomList.getValueAt(selectedRow, 0));
            String roomType = tblRoomList.getValueAt(selectedRow, 1).toString();
            switch (roomType) {
                case "Single Room":
                    mRoom.setRoomType(0);
                    break;
                case "Couple Room":
                    mRoom.setRoomType(1);
                    break;
                default:
                    mRoom.setRoomType(2);
                    break;
            }

            mRoom.setRoomNumber((int) tblRoomList.getValueAt(selectedRow, 2));
            mRoom.setNightPrice(nightPrice);
            mRoom.setHourPrice(hourPrice);
            mRoom.setStatus(0);

            float price;
            long stayTime = checkoutDate.getTime() - checkinDate.getTime();
            long stayInHour = stayTime / (60 * 60 * 1000) % 24;
            long stayInDay = stayTime / (24 * 60 * 60 * 1000);
            price = nightPrice * stayInDay + hourPrice * stayInHour;
            mRoom.setTotalprice(price);

            BookingDialog.listRoomPending.add(mRoom);
            BookingDialog.estPrice += price;
            BookingDialog.txtEstPrice.setText(df.format(BookingDialog.estPrice));
            BookingDialog.loadRoom();
            this.dispose();
        }
    }//GEN-LAST:event_btnAddPendingActionPerformed

    private static void loadData(ResultSet rs) {
        DefaultTableModel tblRoomListModel = (DefaultTableModel) tblRoomList.getModel();
        tblRoomListModel.setRowCount(0);
        int currentRoomID = 0;
        try {
            while (rs.next()) {
                if (checkRoomExist(rs.getInt(1)) && rs.getInt(1) != currentRoomID) {
                    currentRoomID = rs.getInt(1);
                    String status = "";
                    if (rs.getInt(6) == 0) {
                        status = "Available";
                    } else {
                        status = "Maintaining";
                    }

                    String roomType = "";
                    switch (rs.getInt(2)) {
                        case 0:
                            roomType = "Single Room";
                            break;
                        case 1:
                            roomType = "Couple Room";
                            break;
                        default:
                            roomType = "Domitory Room";
                            break;
                    }

                    Object[] data = {
                        rs.getInt(1),
                        roomType,
                        rs.getInt(3),
                        rs.getFloat(4),
                        rs.getFloat(5),
                        status};

                    tblRoomListModel.addRow(data);
                }
            }

            tblRoomList.setModel(tblRoomListModel);
        } catch (SQLException ex) {
            Logger.getLogger(ReceptionistForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private static boolean checkRoomExist(int roomID) {
        for (PendingRoom pdRoom : BookingDialog.listRoomPending) {
            if (pdRoom.getRoomID() == roomID) {
                return false;
            }
        }

        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddPending;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cbRoomType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private static javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpnCheckin;
    private javax.swing.JSpinner jSpnCheckout;
    private static javax.swing.JTable tblRoomList;
    // End of variables declaration//GEN-END:variables
}
