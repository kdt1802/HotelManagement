/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.text.DecimalFormat;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import model.BookingDetail1;
import model.Service;

/**
 *
 * @author sev_user
 */
public class SearchServiceDialog extends java.awt.Dialog {

    private static int selectedrow = -1;
    private static Vector originalTableModel;
    private DocumentListener dcListener;
    private static DecimalFormat df = new DecimalFormat("#.##");

    /**
     * Creates new form SearchServiceDialog
     *
     * @param parent
     * @param modal
     */
    public SearchServiceDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        loadData();
        addDocumentListener();
        txtServiceName.getDocument().addDocumentListener(dcListener);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblService = new javax.swing.JTable();
        spnQuantity = new javax.swing.JSpinner();
        btnSave = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtServiceName = new javax.swing.JTextField();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        tblService.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Service ID", "Service name", "Price", "Units", "Status"
            }
        ));
        jScrollPane2.setViewportView(tblService);

        spnQuantity.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel1.setText("Search");

        txtServiceName.setText("Service Name");
        txtServiceName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtServiceNameMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(574, 574, 574)
                        .addComponent(spnQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 821, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txtServiceName, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtServiceName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(spnQuantity)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        selectedrow = tblService.getSelectedRow();

        if (selectedrow == -1) {
            JOptionPane.showMessageDialog(this, "Select service to add!!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            int serviceID = Integer.parseInt(tblService.getValueAt(selectedrow, 0).toString());
            int quantity = Integer.parseInt(spnQuantity.getValue().toString());
            int totalUnit = Integer.parseInt(tblService.getValueAt(selectedrow, 3).toString());
            Float price = quantity * Float.parseFloat(tblService.getValueAt(selectedrow, 2).toString());

            if (quantity == 0) {
                JOptionPane.showMessageDialog(this, "Quantity must be greater than 0!!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else if (quantity > totalUnit) {
                JOptionPane.showMessageDialog(this, "Quantity can not larger than total units!!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {
                boolean serviceExist = false;
                for (BookingDetail1 bookingDetail1 : BookingDialog.listServicePending) {
                    if (bookingDetail1.getServiceID() == serviceID) {
                        serviceExist = true;
                        bookingDetail1.setServiceQuantity(bookingDetail1.getServiceQuantity() + quantity);
                        bookingDetail1.setServicePrice(bookingDetail1.getServicePrice() + price);
                        BookingDialog.estPrice += price;
                        BookingDialog.txtEstPrice.setText(df.format(BookingDialog.estPrice));
                        BookingDialog.loadService();
                        this.dispose();
                        break;
                    }
                }

                if (!serviceExist) {
                    BookingDetail1 mPendingService = new BookingDetail1();

                    mPendingService.setServiceID(serviceID);
                    mPendingService.setServiceName((String) tblService.getValueAt(selectedrow, 1));
                    mPendingService.setServiceQuantity(quantity);

                    float totalPrice = quantity * (Float.parseFloat((String) tblService.getValueAt(selectedrow, 2)));
                    mPendingService.setServicePrice(totalPrice);

                    BookingDialog.listServicePending.add(mPendingService);
                    BookingDialog.estPrice += price;
                    BookingDialog.txtEstPrice.setText(df.format(BookingDialog.estPrice));
                    BookingDialog.loadService();

                    //status = 1 means this service is being used in atleast 1 booking, do not allow manager modifying it.
                    mPendingService.setStatus(1);
                    this.dispose();
                }

                int newUnit = totalUnit - quantity;
                int newStatus = 0; // Van con` hang`

                if (newUnit <= 0) {
                    newStatus = 1; // Het hang`
                }

                for (Service service : BookingDialog.listServiceAvailable) {
                    if (service.getServiceID() == serviceID) {
                        service.setServiceQuantity(newUnit);
                        service.setStatus(newStatus);
                    }
                }

            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtServiceNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtServiceNameMouseClicked
        txtServiceName.selectAll();
    }//GEN-LAST:event_txtServiceNameMouseClicked

    private void addDocumentListener() {
        dcListener = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                search();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                search();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                search();
            }

            private void search() {
                searchService(txtServiceName.getText());
            }
        };
    }

    private void searchService(String serviceName) {
        DefaultTableModel tblServiceModel = (DefaultTableModel) tblService.getModel();
        tblServiceModel.setRowCount(0);

        for (Object rows : originalTableModel) {
            Vector vectorRow = (Vector) rows;
            if (vectorRow.get(1).toString().contains(serviceName)) {
                tblServiceModel.addRow(vectorRow);
            }
        }
    }

    private static void loadData() {
        DefaultTableModel tblServiceModel = (DefaultTableModel) tblService.getModel();
        tblServiceModel.setRowCount(0);

        for (Service service : BookingDialog.listServiceAvailable) {
            String status;
            if (service.getStatus() == 0) {
                status = "Available";
            } else {
                status = "Out of Stock";
            }
            String[] data = {
                "" + service.getServiceID(),
                service.getServiceName(),
                "" + service.getServicePrice(),
                "" + service.getServiceQuantity(),
                status
            };

            tblServiceModel.addRow(data);
        }
        tblService.setModel(tblServiceModel);

        originalTableModel = (Vector) ((DefaultTableModel) tblService.getModel()).getDataVector().clone();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private static javax.swing.JSpinner spnQuantity;
    private static javax.swing.JTable tblService;
    private javax.swing.JTextField txtServiceName;
    // End of variables declaration//GEN-END:variables
}
